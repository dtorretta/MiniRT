
puede haber espacios antes e las letras??


When you change the window resolution, the window's content must remain consistant.

simple test example:

A	0.2			               255,255,255
L	-10,15,30		0.7

C	0,0,50 	0,0,-1 100

sp	0,0,0		40		255,0,0
pl	0,0,0		0,0,1			0,0,225
cy	0,0,20 	1,0,0	1.0	 50	255,255,255




MAKEFILE: agregar el if para la libreria de mlx
camera: agregar funcion del check verctor
        revisar coments
        actualizar el handle error





5 Noviembre:
draw_scene/render_scene:
camera_setup:

Conceptos importantes:
-La normalizacion de la direccion de la camara es redicir a 1 la longitud del vector
mantemiendo su direccion que es lo que nos importa.
-FOV es el area maxima de visibilidad de una camara, en nuestro caso son 180 grados que debemos
convertir a radianes (unidad de medida para angulos) en caso de querer usar la funcion "tan".
Hay otra forma de hacerlo?
{radians} = {degrees} x {pi/180}.
-Distancia focal es la distancia entre la camara y el plano de la imagen. asignando 1.0 simplifica
calculos de RT sin distorcionar las escalas.
-ft_set_camera_vectors: define dos vectores (right and up) perpendiculares a la direccion de la camara
                        formando un angulo de 90 grados. Estos vectores son cruciales para alinear la
                        vista del espacio en 3D.
        *explicar de nuevo:
        Purpose: Defines two vectors—right and up—perpendicular to the camera’s direction, forming an orthonormal basis. These vectors are crucial to align the viewport in 3D space.

In ft_set_camera_vectors:

	•	Step 1: Set the world_up vector, typically pointing upwards in the global frame (e.g.,  (0, 1, 0) ). If the camera points vertically along the global Y-axis, an alternative vector is selected to avoid zero or near-zero cross products.
	•	Step 2: Compute right by crossing the camera’s direction with world_up and normalizing the result. This gives a vector pointing sideways, perpendicular to direction and world_up.
	•	Step 3: Compute up by crossing right and direction, producing a perpendicular vector aligned with the desired orientation. Normalization ensures that these three vectors (direction, right, up) form an orthogonal (right-angled) and normalized (unit length) basis.

Mathematics of Cross Product: If we cross two vectors  a = (a_x, a_y, a_z)  and  b = (b_x, b_y, b_z) :

a \times b = \left( a_y b_z - a_z b_y, a_z b_x - a_x b_z, a_x b_y - a_y b_x \right)


-El ancho del plano (viewport) lo calculamos multiplicando la tangente (la mitad del angulo del FOV) por 2.
Este paso es necesario para convertir radianes en una distancia fisica

